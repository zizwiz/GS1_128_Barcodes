using System;

namespace GS1_128_Barcodes
{
    public partial class Form1
    {
        public void fill_ai_test_data()
        {
            cmbobx_ai_test_data.Items.Add("Choose AI Test Data");
            cmbobx_ai_test_data.Items.Add("AI 00: SSCC");
            cmbobx_ai_test_data.Items.Add("AI 01: GTIN");
            cmbobx_ai_test_data.Items.Add("AI 02: CONTENT");
            cmbobx_ai_test_data.Items.Add("AI 10: BATCH/LOT");
            cmbobx_ai_test_data.Items.Add("AI 11: PROD DATE");
            cmbobx_ai_test_data.Items.Add("AI 12: DUE DATE");
            cmbobx_ai_test_data.Items.Add("AI 13: PACK DATE");
            cmbobx_ai_test_data.Items.Add("AI 15: BEST BEFORE or BEST BY");
            cmbobx_ai_test_data.Items.Add("AI 16: SELL BY ");
            cmbobx_ai_test_data.Items.Add("AI 17: USE BY OR EXPIRY");
            cmbobx_ai_test_data.Items.Add("AI 20: VARIANT");
            cmbobx_ai_test_data.Items.Add("AI 21: SERIAL");
            cmbobx_ai_test_data.Items.Add("AI 22: CPV");
            cmbobx_ai_test_data.Items.Add("AI 235: TPX");
            cmbobx_ai_test_data.Items.Add("AI 240: ADDITIONAL ID");
            cmbobx_ai_test_data.Items.Add("AI 241: CUST. PART NO.");
            cmbobx_ai_test_data.Items.Add("AI 242: MTO VARIANT");
            cmbobx_ai_test_data.Items.Add("AI 243: PCN");
            cmbobx_ai_test_data.Items.Add("AI 250: SECONDARY SERIAL");
            cmbobx_ai_test_data.Items.Add("AI 251: REF. TO SOURCE");
            cmbobx_ai_test_data.Items.Add("AI 253: GDTI");
            cmbobx_ai_test_data.Items.Add("AI 254: GLN EXTENSION COMPONENT");
            cmbobx_ai_test_data.Items.Add("AI 255: GCN");
            cmbobx_ai_test_data.Items.Add("AI 30: VAR. COUNT");
            cmbobx_ai_test_data.Items.Add("AI 310n: NET WEIGHT (kg)");
            cmbobx_ai_test_data.Items.Add("AI 311n: LENGTH (m)");
            cmbobx_ai_test_data.Items.Add("AI 312n: WIDTH (m)");
            cmbobx_ai_test_data.Items.Add("AI 313n: HEIGHT (m)");
            cmbobx_ai_test_data.Items.Add("AI 314n: AREA (m2)");
            cmbobx_ai_test_data.Items.Add("AI 315n: NET VOLUME (l)");
            cmbobx_ai_test_data.Items.Add("AI 316n: NET VOLUME (m3)");
            cmbobx_ai_test_data.Items.Add("AI 320n: NET WEIGHT (lb)");
            cmbobx_ai_test_data.Items.Add("AI 321n: LENGTH (i)");
            cmbobx_ai_test_data.Items.Add("AI 322n: LENGTH (f)");
            cmbobx_ai_test_data.Items.Add("AI 323n: LENGTH (y)");
            cmbobx_ai_test_data.Items.Add("AI 324n: WIDTH (i)");
            cmbobx_ai_test_data.Items.Add("AI 325n: WIDTH (f)");
            cmbobx_ai_test_data.Items.Add("AI 326n: WIDTH (y)");
            cmbobx_ai_test_data.Items.Add("AI 327n: HEIGHT (i)");
            cmbobx_ai_test_data.Items.Add("AI 328n: HEIGHT (f)");
            cmbobx_ai_test_data.Items.Add("AI 329n: HEIGHT (y)");
            cmbobx_ai_test_data.Items.Add("AI 330n: GROSS WEIGHT (kg)");
            cmbobx_ai_test_data.Items.Add("AI 331n: LENGTH (m), log");
            cmbobx_ai_test_data.Items.Add("AI 332n: WIDTH (m), log");
            cmbobx_ai_test_data.Items.Add("AI 333n: HEIGHT (m), log");
            cmbobx_ai_test_data.Items.Add("AI 334n: AREA (m2), log");
            cmbobx_ai_test_data.Items.Add("AI 335n: VOLUME (l), log");
            cmbobx_ai_test_data.Items.Add("AI 336n: VOLUME (m3), log");
            cmbobx_ai_test_data.Items.Add("AI 337n: KG PER m²");
            cmbobx_ai_test_data.Items.Add("AI 340n: GROSS WEIGHT (lb)");
            cmbobx_ai_test_data.Items.Add("AI 341n: LENGTH (i), log");
            cmbobx_ai_test_data.Items.Add("AI 342n: LENGTH (f), log");
            cmbobx_ai_test_data.Items.Add("AI 343n: LENGTH (y), log");
            cmbobx_ai_test_data.Items.Add("AI 344n: WIDTH (i), log");
            cmbobx_ai_test_data.Items.Add("AI 345n: WIDTH (f), log");
            cmbobx_ai_test_data.Items.Add("AI 346n: WIDTH (y), log");
            cmbobx_ai_test_data.Items.Add("AI 347n: HEIGHT (i), log");
            cmbobx_ai_test_data.Items.Add("AI 348n: HEIGHT (f), log");
            cmbobx_ai_test_data.Items.Add("AI 349n: HEIGHT (y), log");
            cmbobx_ai_test_data.Items.Add("AI 350n: AREA (i2)");
            cmbobx_ai_test_data.Items.Add("AI 351n: AREA (f2)");
            cmbobx_ai_test_data.Items.Add("AI 352n: AREA (y2)");
            cmbobx_ai_test_data.Items.Add("AI 353n: AREA (i2), log");
            cmbobx_ai_test_data.Items.Add("AI 354n: AREA (f2), log");
            cmbobx_ai_test_data.Items.Add("AI 355n: AREA (y2), log");
            cmbobx_ai_test_data.Items.Add("AI 356n: NET WEIGHT (t)");
            cmbobx_ai_test_data.Items.Add("AI 357n: NET VOLUME (oz)");
            cmbobx_ai_test_data.Items.Add("AI 360n: NET VOLUME (q)");
            cmbobx_ai_test_data.Items.Add("AI 361n: NET VOLUME (g)");
            cmbobx_ai_test_data.Items.Add("AI 362n: VOLUME (q), log");
            cmbobx_ai_test_data.Items.Add("AI 363n: VOLUME (g), log");
            cmbobx_ai_test_data.Items.Add("AI 364n: VOLUME (i3)");
            cmbobx_ai_test_data.Items.Add("AI 365n: VOLUME (f3)");
            cmbobx_ai_test_data.Items.Add("AI 366n: VOLUME (y3)");
            cmbobx_ai_test_data.Items.Add("AI 367n: VOLUME (i3), log");
            cmbobx_ai_test_data.Items.Add("AI 368n: VOLUME (f3), log");
            cmbobx_ai_test_data.Items.Add("AI 369n: VOLUME (y3), log");
            cmbobx_ai_test_data.Items.Add("AI 37: COUNT");
            cmbobx_ai_test_data.Items.Add("AI 390n: AMOUNT");
            cmbobx_ai_test_data.Items.Add("AI 391n: AMOUNT");
            cmbobx_ai_test_data.Items.Add("AI 392n: PRICE");
            cmbobx_ai_test_data.Items.Add("AI 393n: PRICE");
            cmbobx_ai_test_data.Items.Add("AI 394n: PRCNT OFF");
            cmbobx_ai_test_data.Items.Add("AI 395n: PRICE/UoM");
            cmbobx_ai_test_data.Items.Add("AI 400: ORDER NUMBER");
            cmbobx_ai_test_data.Items.Add("AI 401: GINC");
            cmbobx_ai_test_data.Items.Add("AI 402: GSIN");
            cmbobx_ai_test_data.Items.Add("AI 403: ROUTE");
            cmbobx_ai_test_data.Items.Add("AI 410: SHIP TO LOC");
            cmbobx_ai_test_data.Items.Add("AI 411: BILL TO");
            cmbobx_ai_test_data.Items.Add("AI 412: PURCHASE FROM");
            cmbobx_ai_test_data.Items.Add("AI 413: SHIP FOR LOC");
            cmbobx_ai_test_data.Items.Add("AI 414: LOC No");
            cmbobx_ai_test_data.Items.Add("AI 415: PAY TO");
            cmbobx_ai_test_data.Items.Add("AI 416: PROD/SERV LOC");
            cmbobx_ai_test_data.Items.Add("AI 417: PARTY");
            cmbobx_ai_test_data.Items.Add("AI 420: SHIP TO POST");
            cmbobx_ai_test_data.Items.Add("AI 421: SHIP TO POST");
            cmbobx_ai_test_data.Items.Add("AI 422: ORIGIN");
            cmbobx_ai_test_data.Items.Add("AI 423: COUNTRY - INITIAL PROCESS.");
            cmbobx_ai_test_data.Items.Add("AI 424: COUNTRY - PROCESS.");
            cmbobx_ai_test_data.Items.Add("AI 425: COUNTRY - DISASSEMBLY");
            cmbobx_ai_test_data.Items.Add("AI 426: COUNTRY – FULL PROCESS");
            cmbobx_ai_test_data.Items.Add("AI 427: ORIGIN SUBDIVISION");
            cmbobx_ai_test_data.Items.Add("AI 4300: SHIP TO COMP");
            cmbobx_ai_test_data.Items.Add("AI 4301: SHIP TO NAME");
            cmbobx_ai_test_data.Items.Add("AI 4302: SHIP TO ADD1");
            cmbobx_ai_test_data.Items.Add("AI 4303: SHIP TO ADD2");
            cmbobx_ai_test_data.Items.Add("AI 4304: SHIP TO SUB");
            cmbobx_ai_test_data.Items.Add("AI 4305: SHIP TO LOC");
            cmbobx_ai_test_data.Items.Add("AI 4306: SHIP TO REG");
            cmbobx_ai_test_data.Items.Add("AI 4307: SHIP TO COUNTRY");
            cmbobx_ai_test_data.Items.Add("AI 4308: SHIP TO PHONE");
            cmbobx_ai_test_data.Items.Add("AI 4310: RTN TO COMP");
            cmbobx_ai_test_data.Items.Add("AI 4311: RTN TO NAME");
            cmbobx_ai_test_data.Items.Add("AI 4312: RTN TO ADD1");
            cmbobx_ai_test_data.Items.Add("AI 4313: RTN TO ADD2");
            cmbobx_ai_test_data.Items.Add("AI 4314: RTN TO SUB");
            cmbobx_ai_test_data.Items.Add("AI 4315: RTN TO LOC");
            cmbobx_ai_test_data.Items.Add("AI 4316: RTN TO REG");
            cmbobx_ai_test_data.Items.Add("AI 4317: RTN TO COUNTRY");
            cmbobx_ai_test_data.Items.Add("AI 4318: RTN TO POST");
            cmbobx_ai_test_data.Items.Add("AI 4319: RTN TO PHONE");
            cmbobx_ai_test_data.Items.Add("AI 4320: SRV DESCRIPTION");
            cmbobx_ai_test_data.Items.Add("AI 4321: DANGEROUS GOODS");
            cmbobx_ai_test_data.Items.Add("AI 4322: AUTH LEAV");
            cmbobx_ai_test_data.Items.Add("AI 4323: SIG REQUIRED");
            cmbobx_ai_test_data.Items.Add("AI 4324: NBEF DEL DT");
            cmbobx_ai_test_data.Items.Add("AI 4325: NAFT DEL DT");
            cmbobx_ai_test_data.Items.Add("AI 4326: REL DATE");
            cmbobx_ai_test_data.Items.Add("AI 7001: NSN");
            cmbobx_ai_test_data.Items.Add("AI 7002: MEAT CUT");
            cmbobx_ai_test_data.Items.Add("AI 7003: EXPIRY TIME");
            cmbobx_ai_test_data.Items.Add("AI 7004: ACTIVE POTENCY");
            cmbobx_ai_test_data.Items.Add("AI 7005: CATCH AREA");
            cmbobx_ai_test_data.Items.Add("AI 7006: FIRST FREEZE DATE");
            cmbobx_ai_test_data.Items.Add("AI 7007: HARVEST DATE");
            cmbobx_ai_test_data.Items.Add("AI 7008: AQUATIC SPECIES");
            cmbobx_ai_test_data.Items.Add("AI 7009: FISHING GEAR TYPE");
            cmbobx_ai_test_data.Items.Add("AI 7010: PROD METHOD");
            cmbobx_ai_test_data.Items.Add("AI 7020: REFURB LOT");
            cmbobx_ai_test_data.Items.Add("AI 7021: FUNC STAT");
            cmbobx_ai_test_data.Items.Add("AI 7022: REV STAT");
            cmbobx_ai_test_data.Items.Add("AI 7023: GIAI – ASSEMBLY");
            cmbobx_ai_test_data.Items.Add("AI 703s: PROCESSOR # s");
            cmbobx_ai_test_data.Items.Add("AI 7040: UIC+EXT");
            cmbobx_ai_test_data.Items.Add("AI 710: NHRN PZN");
            cmbobx_ai_test_data.Items.Add("AI 711: NHRN CIP");
            cmbobx_ai_test_data.Items.Add("AI 712: NHRN CN");
            cmbobx_ai_test_data.Items.Add("AI 713: NHRN DRN");
            cmbobx_ai_test_data.Items.Add("AI 714: NHRN AIM");
            cmbobx_ai_test_data.Items.Add("AI 715: NHRN NDC");
            cmbobx_ai_test_data.Items.Add("AI 715: NHRN xxx");
            cmbobx_ai_test_data.Items.Add("AI 723s: CERT # s");
            cmbobx_ai_test_data.Items.Add("AI 7240: PROTOCOL");
            cmbobx_ai_test_data.Items.Add("AI 8001: DIMENSIONS");
            cmbobx_ai_test_data.Items.Add("AI 8002: CMT No");
            cmbobx_ai_test_data.Items.Add("AI 8003: GRAI");
            cmbobx_ai_test_data.Items.Add("AI 8004: GIAI");
            cmbobx_ai_test_data.Items.Add("AI 8005: PRICE PER UNIT");
            cmbobx_ai_test_data.Items.Add("AI 8006: ITIP");
            cmbobx_ai_test_data.Items.Add("AI 8007: IBAN");
            cmbobx_ai_test_data.Items.Add("AI 8008: PROD TIME");
            cmbobx_ai_test_data.Items.Add("AI 8009: OPTSEN");
            cmbobx_ai_test_data.Items.Add("AI 8010: CPID");
            cmbobx_ai_test_data.Items.Add("AI 8011: CPID SERIAL");
            cmbobx_ai_test_data.Items.Add("AI 8012: VERSION");
            cmbobx_ai_test_data.Items.Add("AI 8013: GMN");
            cmbobx_ai_test_data.Items.Add("AI 8017: GSRN - PROVIDER");
            cmbobx_ai_test_data.Items.Add("AI 8018: GSRN - RECIPIENT");
            cmbobx_ai_test_data.Items.Add("AI 8019: SRIN");
            cmbobx_ai_test_data.Items.Add("AI 8020: REF No");
            cmbobx_ai_test_data.Items.Add("AI 8026: ITIP CONTENT");
            cmbobx_ai_test_data.Items.Add("AI 8111: POINTS");
            cmbobx_ai_test_data.Items.Add("AI 8200: PRODUCT URL");
            cmbobx_ai_test_data.Items.Add("AI 90: INTERNAL 90");
            cmbobx_ai_test_data.Items.Add("AI 91: INTERNAL 91");
            cmbobx_ai_test_data.Items.Add("AI 92: INTERNAL 92");
            cmbobx_ai_test_data.Items.Add("AI 93: INTERNAL 93");
            cmbobx_ai_test_data.Items.Add("AI 94: INTERNAL 94");
            cmbobx_ai_test_data.Items.Add("AI 95: INTERNAL 95");
            cmbobx_ai_test_data.Items.Add("AI 96: INTERNAL 96");
            cmbobx_ai_test_data.Items.Add("AI 97: INTERNAL 97");
            cmbobx_ai_test_data.Items.Add("AI 98: INTERNAL 98");
            cmbobx_ai_test_data.Items.Add("AI 99: INTERNAL 99");
        }

        private void cmbobx_ai_test_data_SelectedIndexChanged(object sender, EventArgs e)
        {

            switch (cmbobx_ai_test_data.SelectedItem)
            {
                case "AI 00: SSCC": txtbx_data_input.Text = "(00)001234560000000018"; return;
                case "AI 01: GTIN": txtbx_data_input.Text = "(01)95012345678903"; return;
                case "AI 02: CONTENT": txtbx_data_input.Text = "(02)95012345678903"; return;
                case "AI 10: BATCH/LOT": txtbx_data_input.Text = "(10)847976000040"; return;
                case "AI 11: PROD DATE": txtbx_data_input.Text = "(11)200509"; return;
                case "AI 12: DUE DATE": txtbx_data_input.Text = "(12)210211"; return;
                case "AI 13: PACK DATE": txtbx_data_input.Text = "(13)191120"; return;
                case "AI 15: BEST BEFORE or BEST BY": txtbx_data_input.Text = "(15)111201"; return;
                case "AI 16: SELL BY ": txtbx_data_input.Text = "(16)311021"; return;
                case "AI 17: USE BY OR EXPIRY": txtbx_data_input.Text = "(17)260611"; return;
                case "AI 20: VARIANT": txtbx_data_input.Text = "(20)10"; return;
                case "AI 21: SERIAL": txtbx_data_input.Text = "(21)A34ReT6780981342"; return;
                case "AI 22: CPV": txtbx_data_input.Text = "(22)1jD456TRgazp0s88"; return;
                case "AI 235: TPX": txtbx_data_input.Text = "(235)1B23rgty4IBD987PKJYGV7"; return;
                case "AI 240: ADDITIONAL ID": txtbx_data_input.Text = "(240)123456tredfghXZAQWED3456789654"; return;
                case "AI 241: CUST. PART NO.": txtbx_data_input.Text = "(241)546tFRE328IJHytf5432knvawsf"; return;
                case "AI 242: MTO VARIANT": txtbx_data_input.Text = "(242)11223344556678899001029384756"; return;
                case "AI 243: PCN": txtbx_data_input.Text = "(243)AF45AHJU764NHGR82"; return;
                case "AI 250: SECONDARY SERIAL": txtbx_data_input.Text = "(250)15qtGafa546348jgaVCDe20987"; return;
                case "AI 251: REF. TO SOURCE": txtbx_data_input.Text = "(251)1tqUH637389dsmhhx66FEDDF132456"; return;
                case "AI 253: GDTI": txtbx_data_input.Text = "(253)0123456789012ABC123QWASZX9"; return;
                case "AI 254: GLN EXTENSION COMPONENT": txtbx_data_input.Text = "(254)A45rf3ujhgtLKJH654"; return;
                case "AI 255: GCN": txtbx_data_input.Text = "(255)012345678901201234567"; return;
                case "AI 30: VAR. COUNT": txtbx_data_input.Text = "(30)12345678"; return;
                case "AI 310n: NET WEIGHT (kg)": txtbx_data_input.Text = "(3102)000040"; return;
                case "AI 311n: LENGTH (m)": txtbx_data_input.Text = "(3114)023450"; return;
                case "AI 312n: WIDTH (m)": txtbx_data_input.Text = "(3123)000040"; return;
                case "AI 313n: HEIGHT (m)": txtbx_data_input.Text = "(3135)540040"; return;
                case "AI 314n: AREA (m2)": txtbx_data_input.Text = "(3141)000042"; return;
                case "AI 315n: NET VOLUME (l)": txtbx_data_input.Text = "(3154)012340"; return;
                case "AI 316n: NET VOLUME (m3)": txtbx_data_input.Text = "(3160)000040"; return;
                case "AI 320n: NET WEIGHT (lb)": txtbx_data_input.Text = "(3202)000040"; return;
                case "AI 321n: LENGTH (i)": txtbx_data_input.Text = "(3213)005340"; return;
                case "AI 322n: LENGTH (f)": txtbx_data_input.Text = "(3221)000089"; return;
                case "AI 323n: LENGTH (y)": txtbx_data_input.Text = "(3235)082561"; return;
                case "AI 324n: WIDTH (i)": txtbx_data_input.Text = "(3244)123897"; return;
                case "AI 325n: WIDTH (f)": txtbx_data_input.Text = "(3250)000458"; return;
                case "AI 326n: WIDTH (y)": txtbx_data_input.Text = "(3265)087650"; return;
                case "AI 327n: HEIGHT (i)": txtbx_data_input.Text = "(3273)005678"; return;
                case "AI 328n: HEIGHT (f)": txtbx_data_input.Text = "(3285)453876"; return;
                case "AI 329n: HEIGHT (y)": txtbx_data_input.Text = "(3290)236586"; return;
                case "AI 330n: GROSS WEIGHT (kg)": txtbx_data_input.Text = "(3300)236586"; return;
                case "AI 331n: LENGTH (m), log": txtbx_data_input.Text = "(3315)453876"; return;
                case "AI 332n: WIDTH (m), log": txtbx_data_input.Text = "(3323)005678"; return;
                case "AI 333n: HEIGHT (m), log": txtbx_data_input.Text = "(3335)087650"; return;
                case "AI 334n: AREA (m2), log": txtbx_data_input.Text = "(3340)000458"; return;
                case "AI 335n: VOLUME (l), log": txtbx_data_input.Text = "(3355)082561"; return;
                case "AI 336n: VOLUME (m3), log": txtbx_data_input.Text = "(3361)000234"; return;
                case "AI 337n: KG PER m²": txtbx_data_input.Text = "(3372)236586"; return;
                case "AI 340n: GROSS WEIGHT (lb)": txtbx_data_input.Text = "(3400)135790"; return;
                case "AI 341n: LENGTH (i), log": txtbx_data_input.Text = "(3413)246801"; return;
                case "AI 342n: LENGTH (f), log": txtbx_data_input.Text = "(3424)009876"; return;
                case "AI 343n: LENGTH (y), log": txtbx_data_input.Text = "(3435)236586"; return;
                case "AI 344n: WIDTH (i), log": txtbx_data_input.Text = "(3440)000098"; return;
                case "AI 345n: WIDTH (f), log": txtbx_data_input.Text = "(3451)123876"; return;
                case "AI 346n: WIDTH (y), log": txtbx_data_input.Text = "(3462)864975"; return;
                case "AI 347n: HEIGHT (i), log": txtbx_data_input.Text = "(3473)963107"; return;
                case "AI 348n: HEIGHT (f), log": txtbx_data_input.Text = "(3485)082561"; return;
                case "AI 349n: HEIGHT (y), log": txtbx_data_input.Text = "(3490)236586"; return;
                case "AI 350n: AREA (i2)": txtbx_data_input.Text = "(3501)000234"; return;
                case "AI 351n: AREA (f2)": txtbx_data_input.Text = "(3512)236586"; return;
                case "AI 352n: AREA (y2)": txtbx_data_input.Text = "(3520)135790"; return;
                case "AI 353n: AREA (i2), log": txtbx_data_input.Text = "(3533)963107"; return;
                case "AI 354n: AREA (f2), log": txtbx_data_input.Text = "(3544)009876"; return;
                case "AI 355n: AREA (y2), log": txtbx_data_input.Text = "(3550)135790"; return;
                case "AI 356n: NET WEIGHT (t)": txtbx_data_input.Text = "(3563)246801"; return;
                case "AI 357n: NET VOLUME (oz)": txtbx_data_input.Text = "(3574)009876"; return;
                case "AI 360n: NET VOLUME (q)": txtbx_data_input.Text = "(3605)236586"; return;
                case "AI 361n: NET VOLUME (g)": txtbx_data_input.Text = "(3610)000098"; return;
                case "AI 362n: VOLUME (q), log": txtbx_data_input.Text = "(3621)123876"; return;
                case "AI 363n: VOLUME (g), log": txtbx_data_input.Text = "(3630)236586"; return;
                case "AI 364n: VOLUME (i3)": txtbx_data_input.Text = "(3291)123876"; return;
                case "AI 365n: VOLUME (f3)": txtbx_data_input.Text = "(3292)864975"; return;
                case "AI 366n: VOLUME (y3)": txtbx_data_input.Text = "(3293)963107"; return;
                case "AI 367n: VOLUME (i3), log": txtbx_data_input.Text = "(3674)009876"; return;
                case "AI 368n: VOLUME (f3), log": txtbx_data_input.Text = "(3680)236586"; return;
                case "AI 369n: VOLUME (y3), log": txtbx_data_input.Text = "(3692)864975"; return;
                case "AI 37: COUNT": txtbx_data_input.Text = "(37)19364730"; return;
                case "AI 390n: AMOUNT": txtbx_data_input.Text = "(3902)1295"; return;
                case "AI 391n: AMOUNT": txtbx_data_input.Text = ""; return;
                case "AI 392n: PRICE": txtbx_data_input.Text = ""; return;
                case "AI 393n: PRICE": txtbx_data_input.Text = ""; return;
                case "AI 394n: PRCNT OFF": txtbx_data_input.Text = ""; return;
                case "AI 395n: PRICE/UoM": txtbx_data_input.Text = ""; return;
                case "AI 400: ORDER NUMBER": txtbx_data_input.Text = ""; return;
                case "AI 401: GINC": txtbx_data_input.Text = ""; return;
                case "AI 402: GSIN": txtbx_data_input.Text = ""; return;
                case "AI 403: ROUTE": txtbx_data_input.Text = ""; return;
                case "AI 410: SHIP TO LOC": txtbx_data_input.Text = ""; return;
                case "AI 411: BILL TO": txtbx_data_input.Text = ""; return;
                case "AI 412: PURCHASE FROM": txtbx_data_input.Text = ""; return;
                case "AI 413: SHIP FOR LOC": txtbx_data_input.Text = ""; return;
                case "AI 414: LOC No": txtbx_data_input.Text = ""; return;
                case "AI 415: PAY TO": txtbx_data_input.Text = ""; return;
                case "AI 416: PROD/SERV LOC": txtbx_data_input.Text = ""; return;
                case "AI 417: PARTY": txtbx_data_input.Text = ""; return;
                case "AI 420: SHIP TO POST": txtbx_data_input.Text = "(420)12345"; return;
                case "AI 421: SHIP TO POST": txtbx_data_input.Text = ""; return;
                case "AI 422: ORIGIN": txtbx_data_input.Text = ""; return;
                case "AI 423: COUNTRY - INITIAL PROCESS.": txtbx_data_input.Text = ""; return;
                case "AI 424: COUNTRY - PROCESS.": txtbx_data_input.Text = ""; return;
                case "AI 425: COUNTRY - DISASSEMBLY": txtbx_data_input.Text = ""; return;
                case "AI 426: COUNTRY – FULL PROCESS": txtbx_data_input.Text = ""; return;
                case "AI 427: ORIGIN SUBDIVISION": txtbx_data_input.Text = ""; return;
                case "AI 4300: SHIP TO COMP": txtbx_data_input.Text = ""; return;
                case "AI 4301: SHIP TO NAME": txtbx_data_input.Text = ""; return;
                case "AI 4302: SHIP TO ADD1": txtbx_data_input.Text = ""; return;
                case "AI 4303: SHIP TO ADD2": txtbx_data_input.Text = ""; return;
                case "AI 4304: SHIP TO SUB": txtbx_data_input.Text = ""; return;
                case "AI 4305: SHIP TO LOC": txtbx_data_input.Text = ""; return;
                case "AI 4306: SHIP TO REG": txtbx_data_input.Text = ""; return;
                case "AI 4307: SHIP TO COUNTRY": txtbx_data_input.Text = ""; return;
                case "AI 4308: SHIP TO PHONE": txtbx_data_input.Text = ""; return;
                case "AI 4310: RTN TO COMP": txtbx_data_input.Text = ""; return;
                case "AI 4311: RTN TO NAME": txtbx_data_input.Text = ""; return;
                case "AI 4312: RTN TO ADD1": txtbx_data_input.Text = ""; return;
                case "AI 4313: RTN TO ADD2": txtbx_data_input.Text = ""; return;
                case "AI 4314: RTN TO SUB": txtbx_data_input.Text = ""; return;
                case "AI 4315: RTN TO LOC": txtbx_data_input.Text = ""; return;
                case "AI 4316: RTN TO REG": txtbx_data_input.Text = ""; return;
                case "AI 4317: RTN TO COUNTRY": txtbx_data_input.Text = ""; return;
                case "AI 4318: RTN TO POST": txtbx_data_input.Text = ""; return;
                case "AI 4319: RTN TO PHONE": txtbx_data_input.Text = ""; return;
                case "AI 4320: SRV DESCRIPTION": txtbx_data_input.Text = ""; return;
                case "AI 4321: DANGEROUS GOODS": txtbx_data_input.Text = ""; return;
                case "AI 4322: AUTH LEAV": txtbx_data_input.Text = ""; return;
                case "AI 4323: SIG REQUIRED": txtbx_data_input.Text = ""; return;
                case "AI 4324: NBEF DEL DT": txtbx_data_input.Text = ""; return;
                case "AI 4325: NAFT DEL DT": txtbx_data_input.Text = ""; return;
                case "AI 4326: REL DATE": txtbx_data_input.Text = ""; return;
                case "AI 7001: NSN": txtbx_data_input.Text = ""; return;
                case "AI 7002: MEAT CUT": txtbx_data_input.Text = ""; return;
                case "AI 7003: EXPIRY TIME": txtbx_data_input.Text = ""; return;
                case "AI 7004: ACTIVE POTENCY": txtbx_data_input.Text = ""; return;
                case "AI 7005: CATCH AREA": txtbx_data_input.Text = ""; return;
                case "AI 7006: FIRST FREEZE DATE": txtbx_data_input.Text = ""; return;
                case "AI 7007: HARVEST DATE": txtbx_data_input.Text = ""; return;
                case "AI 7008: AQUATIC SPECIES": txtbx_data_input.Text = ""; return;
                case "AI 7009: FISHING GEAR TYPE": txtbx_data_input.Text = ""; return;
                case "AI 7010: PROD METHOD": txtbx_data_input.Text = ""; return;
                case "AI 7020: REFURB LOT": txtbx_data_input.Text = ""; return;
                case "AI 7021: FUNC STAT": txtbx_data_input.Text = ""; return;
                case "AI 7022: REV STAT": txtbx_data_input.Text = ""; return;
                case "AI 7023: GIAI – ASSEMBLY": txtbx_data_input.Text = ""; return;
                case "AI 703s: PROCESSOR # s": txtbx_data_input.Text = ""; return;
                case "AI 7040: UIC+EXT": txtbx_data_input.Text = ""; return;
                case "AI 710: NHRN PZN": txtbx_data_input.Text = ""; return;
                case "AI 711: NHRN CIP": txtbx_data_input.Text = ""; return;
                case "AI 712: NHRN CN": txtbx_data_input.Text = ""; return;
                case "AI 713: NHRN DRN": txtbx_data_input.Text = ""; return;
                case "AI 714: NHRN AIM": txtbx_data_input.Text = ""; return;
                case "AI 715: NHRN NDC": txtbx_data_input.Text = ""; return;
                case "AI 715: NHRN xxx": txtbx_data_input.Text = ""; return;
                case "AI 723s: CERT # s": txtbx_data_input.Text = ""; return;
                case "AI 7240: PROTOCOL": txtbx_data_input.Text = ""; return;
                case "AI 8001: DIMENSIONS": txtbx_data_input.Text = ""; return;
                case "AI 8002: CMT No": txtbx_data_input.Text = ""; return;
                case "AI 8003: GRAI": txtbx_data_input.Text = ""; return;
                case "AI 8004: GIAI": txtbx_data_input.Text = ""; return;
                case "AI 8005: PRICE PER UNIT": txtbx_data_input.Text = ""; return;
                case "AI 8006: ITIP": txtbx_data_input.Text = ""; return;
                case "AI 8007: IBAN": txtbx_data_input.Text = ""; return;
                case "AI 8008: PROD TIME": txtbx_data_input.Text = ""; return;
                case "AI 8009: OPTSEN": txtbx_data_input.Text = ""; return;
                case "AI 8010: CPID": txtbx_data_input.Text = ""; return;
                case "AI 8011: CPID SERIAL": txtbx_data_input.Text = ""; return;
                case "AI 8012: VERSION": txtbx_data_input.Text = ""; return;
                case "AI 8013: GMN": txtbx_data_input.Text = ""; return;
                case "AI 8017: GSRN - PROVIDER": txtbx_data_input.Text = ""; return;
                case "AI 8018: GSRN - RECIPIENT": txtbx_data_input.Text = ""; return;
                case "AI 8019: SRIN": txtbx_data_input.Text = ""; return;
                case "AI 8020: REF No": txtbx_data_input.Text = "(8020)198798787"; return;
                case "AI 8026: ITIP CONTENT": txtbx_data_input.Text = ""; return;
                case "AI 8111: POINTS": txtbx_data_input.Text = ""; return;
                case "AI 8200: PRODUCT URL": txtbx_data_input.Text = ""; return;
                case "AI 90: INTERNAL 90": txtbx_data_input.Text = ""; return;
                case "AI 91: INTERNAL 91": txtbx_data_input.Text = "(91)01123456789123456788"; return;
                case "AI 92: INTERNAL 92": txtbx_data_input.Text = ""; return;
                case "AI 93: INTERNAL 93": txtbx_data_input.Text = ""; return;
                case "AI 94: INTERNAL 94": txtbx_data_input.Text = ""; return;
                case "AI 95: INTERNAL 95": txtbx_data_input.Text = ""; return;
                case "AI 96: INTERNAL 96": txtbx_data_input.Text = ""; return;
                case "AI 97: INTERNAL 97": txtbx_data_input.Text = ""; return;
                case "AI 98: INTERNAL 98": txtbx_data_input.Text = ""; return;
                case "AI 99: INTERNAL 99": txtbx_data_input.Text = ""; return;
                default:
                    return;
            }
        }
    }
}
